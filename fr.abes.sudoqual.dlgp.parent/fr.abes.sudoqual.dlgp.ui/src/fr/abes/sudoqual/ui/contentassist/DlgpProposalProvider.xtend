/*
 * generated by Xtext 2.17.1
 */
package fr.abes.sudoqual.ui.contentassist

import fr.abes.sudoqual.DlgpUtils
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import fr.abes.sudoqual.dlgp.Atom
import fr.abes.sudoqual.rule_engine.predicate.Filter
import fr.abes.sudoqual.rule_engine.predicate.Criterion

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class DlgpProposalProvider extends AbstractDlgpProposalProvider {
	
	override void completeGoalPredicate_Name(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		// call implementation of superclass
  		super.completeGoalPredicate_Name(model, assignment, context, acceptor);
		
		acceptor.accept(createCompletionProposal("sameAs",context));
		acceptor.accept(createCompletionProposal("diffFrom",context));
	}
	
	override void completePredicate_Name(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		// call implementation of superclass
  		super.completePredicate_Name(model, assignment, context, acceptor);
		
		val project = DlgpUtils.getQualinkaProjectFrom(model);
		for(String name : project.predicatesNames) {
			acceptor.accept(createCompletionProposal(name,context));
			acceptor.accept(createCompletionProposal("not_" + name,context));
		}
	}
	
	override void completeAtom_Terms(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		// call implementation of superclass
  		//super.completeAtom_Terms(model, assignment, context, acceptor);
  		
  		if(model instanceof Atom) {
	  		val project = DlgpUtils.getQualinkaProjectFrom(model);
	  		val predicate = project.getPredicateInstance(DlgpUtils.removeNotFrom(model.predicate.name));
	  		if(predicate instanceof Filter) {
	  			acceptor.accept(createCompletionProposal("X", context));
				acceptor.accept(createCompletionProposal("Y", context));
	  		} else 	if(predicate instanceof Criterion) {
	  			val termsLength = model.terms.length;
	  			if(termsLength == 0) {
	  				acceptor.accept(createCompletionProposal("X", context));
	  			} else if (termsLength == 1) {
	  				acceptor.accept(createCompletionProposal("Y", context));
	  			} else if (termsLength == 2) {
			  		val compType = predicate.comparisonType;
			  		if(compType.hasAlways) {
			  			acceptor.accept(createCompletionProposal("always", context));
			  		}
					for(var i=compType.maxValue; i > 0; i--) {
			  			acceptor.accept(createCompletionProposal(i.toString(), context));
			  		}
			  		if(compType.hasNeutral) {
			  			acceptor.accept(createCompletionProposal("neutral", context));
			  		}
			  		for(var i=-1; i >= compType.minValue; i--) {
			  			acceptor.accept(createCompletionProposal(i.toString(), context));
			  		}
			  		if(compType.hasNever) {
			  			acceptor.accept(createCompletionProposal("never", context));
			  		}
		  		}
		  		
			}
		}
	}
	
}
